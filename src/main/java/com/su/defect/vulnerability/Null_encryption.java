package com.su.defect.vulnerability;

import com.su.analysis.Http_req_pars;
import com.su.analysis.Http_res_pars;
import com.su.analysis.Jwt_pars;
import com.su.util.Socket_http_utility;

import java.util.ArrayList;
import java.util.List;

public class Null_encryption extends F_vulnerability{

    @Override
    public Boolean scan() {
        Jwt_pars jwt_pars = getHttp_req_pars().getJwt_pars();
        try {
            Http_res_pars http_res_pars= Socket_http_utility.send_s_http2(getHttp_req_pars());
            String y_body = http_res_pars.getBody();

            String y_http_ = getHttp_req_pars().getHttp_text();
            List<String> nullen_jwts = new ArrayList<>();
            nullen_jwts.add(jwt_pars.getHead()+"."+jwt_pars.getPayload()+".");
            nullen_jwts.add(jwt_pars.getHead()+"."+jwt_pars.getPayload());
            nullen_jwts.add(jwt_pars.getHead()+"."+jwt_pars.getPayload()+"."+"sadusaidyuy127y72hjhwqkjehwqe");
            for (String nullen_jwt:nullen_jwts){
                String node_http_= y_http_.replace(nullen_jwt,jwt_pars.getJwt_text());
                getHttp_req_pars().setHttp_text(node_http_);
                Http_res_pars http_res_pars_no=Socket_http_utility.send_s_http2(getHttp_req_pars());
                String nullbody=http_res_pars_no.getBody();
                if (y_body.equals(nullbody)){
                    setDescribe("空加密算法");
                    setV_name("不校验jwt中的密钥信息");
                    setDetails("密钥信息可至空");
                    setRisk_level("高");
                    return true;
                }
            }
            return false;
        }catch (Exception e){

            return false;
        }
    }

}

